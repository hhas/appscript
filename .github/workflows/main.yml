name: Build Pipeline

on:
  # Run on all pushed commits and when a new release is created
  # Prevents duplicated pipeline runs as a release also pushes a tag
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
  release:
    types:
      - created

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        python-version: ['3.10']
        architecture: ['x64']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - name: Set version string
        shell: bash
        run: |
          if [ ${GITHUB_REF::9} = "refs/tags" ]; then
            version_string=${GITHUB_REF:10}
          else
            version_string=0.0.0+${GITHUB_SHA::8}
          fi;
          sed -i '' -e "s/__version__ = 'dev'/__version__ = '$version_string'/" ./py-appscript/lib/appscript/__init__.py
      - name: Install dependencies
        run: |
          python -m pip install wheel twine build cibuildwheel
      - name: Build Wheels
        run: |
          cd ./py-appscript
          python setup.py sdist
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp37-* cp38-* cp39-* cp310-* cp311-*"
          CIBW_TEST_SKIP: "*_arm64"
          CIBW_ARCHS_MACOS: "x86_64 universal2"
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./py-appscript/dist

  publish:
    name: Publish
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'
      - name: Install Python dependencies
        run: python -m pip install twine
      - name: Download source package and wheels from previous job
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Publish source pacakge and wheels to PyPI
        run: twine upload --skip-existing ./dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}
